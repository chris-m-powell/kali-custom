let mapleader = " "

{% if neovim.vim_plug.enable %}
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/nvim/plugged')
{# -------------------------------------------------- #}
{% if neovim.plugins.ale.enable %}
Plug 'dense-analysis/ale'
{% endif %}
{# -------------------------------------------------- #}
{% if neovim.plugins.ale.enable %}
Plug 'itchyny/lightline.vim'
    let g:lightline = {
        \ 'colorscheme': 'nord',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'readonly', 'filename', 'modified'] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'percent' ],
        \              [ 'fileencoding', 'filetype', 'charvalue' ], 
        \              ['linter_checking','linter_errors', 'linter_warnings', 'linter_ok']]
        \	},
        \ }
    let g:lightline.component_expand = {
        \  'linter_checking': 'lightline#ale#checking',
        \  'linter_warnings': 'lightline#ale#warnings',
        \  'linter_errors': 'lightline#ale#errors',
        \  'linter_ok': 'lightline#ale#ok',
        \ }
    let g:lightline.component_type = {
        \     'linter_checking': 'left',
        \     'linter_warnings': 'warning',
        \     'linter_errors': 'error',
        \     'linter_ok': 'left',
        \ }
{% endif %}
{# -------------------------------------------------- #}
{% if neovim.plugins.lightline_ale.enable %}
Plug 'maximbaz/lightline-ale'
{% endif %}
{# -------------------------------------------------- #}
{% if neovim.plugins.nord_vim.enable %}
Plug 'arcticicestudio/nord-vim'
{% endif %}
{# -------------------------------------------------- #}
{% if neovim.plugins.vim_commentary.enable %}
Plug 'tpope/vim-commentary'
    nmap <leader>c <Plug>CommentaryLine
    vmap <leader>c <Plug>Commentary
{% endif %}
{# -------------------------------------------------- #}
{% if neovim.plugins.unite.enable and neovim.plugins.unite.enable %}
Plug 'Shougo/unite.vim' | Plug 'Shougo/vimfiler.vim'
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_safe_mode_by_default = 0
    let g:vimfiler_force_overwrite_statusline = 0
    let g:vimfiler_no_default_key_mappings = 1
    let g:vimfiler_enable_auto_cd = 1			
    autocmd FileType vimfiler map <buffer> <CR> <Plug>(vimfiler_smart_l)
    autocmd FileType vimfiler map <buffer> l <Plug>(vimfiler_smart_l)
    autocmd FileType vimfiler map <buffer> h <Plug>(vimfiler_smart_h)
    autocmd FileType vimfiler map <buffer> n <Plug>(vimfiler_new_file)
    autocmd FileType vimfiler map <buffer> cw <Plug>(vimfiler_rename_file)
    autocmd FileType vimfiler map <buffer> <C-d> <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_delete_file)
    autocmd FileType vimfiler map <buffer> md <Plug>(vimfiler_make_directory)
    autocmd FileType vimfiler map <buffer> m <Plug>(vimfiler_toggle_mark_current_line)
    autocmd FileType vimfiler map <buffer> zh <Plug>(vimfiler_toggle_visible_ignore_files)
    autocmd FileType vimfiler map <buffer> yy <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_clipboard_copy_file)
    autocmd FileType vimfiler map <buffer> dd <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_clipboard_move_file)
    autocmd FileType vimfiler map <buffer> pp <Plug>(vimfiler_clipboard_paste)yes<CR>
    autocmd FileType vimfiler setlocal nonumber
    autocmd FileType vimfiler setlocal cursorline
    map <silent> <C-f> :VimFilerExplorer -split -parent -toggle -simple -winwidth=30 -no-quit<CR>
{% endif %}
call plug#end()
{% endif %}

{% for item in neovim.config.set.dict | dict2items -%} 
set {{ item.key }}={{ item.value }}
{% endfor %}

{% for item in neovim.config.set.list -%}
set {{ item }}
{% endfor %}

{% for item in neovim.config.map -%}
map {{ item }}
{% endfor %}

{% for item in neovim.config.noremap -%}
noremap {{ item }}
{% endfor %}

{% for item in neovim.config.nnoremap -%}
nnoremap {{ item }}
{% endfor %}

{% for item in neovim.config.tnoremap -%}
tnoremap {{ item }}
{% endfor %}

{% for item in neovim.config.vnoremap -%}
vnoremap {{ item }}
{% endfor %}

{% if neovim.plugins.nord_vim.enable %}
colorscheme nord
{% endif %}

highlight clear CursorLine
highlight CursorLineNR ctermfg=green

" return to last edit position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" handle non-Vim files
au BufRead *.pdf,*.jpg,*.png,*.gif sil exe "!xdg-open " . shellescape(expand("%:p")) | bd | let &ft=&ft | redraw!

" Detect external file changes 
au FocusGained,BufEnter * checktime

" no line numbers in Terminal
au TermOpen * setlocal nonumber norelativenumber

" insert mode in Terminal
au BufEnter * if &buftype == 'terminal' | :startinsert! | endif

let g:term_buf = 0
    function! Term_toggle()
        1wincmd l
        if g:term_buf == bufnr("")
            setlocal bufhidden=hide
            close
        else
            bot vsplit new
            " 12winc -
            " exec "resize " . 15 
            exec "vertical resize " . 75 
            try
                exec "buffer ".g:term_buf
            catch
                call termopen("zsh", {"detach": 0})
                let g:term_buf = bufnr("")
            endtry
            startinsert!
        endif
    endfunction
